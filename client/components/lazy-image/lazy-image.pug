//- Create a lazy-loading image that conserves iamge bandwidth and improves UX
//- Parameters:
//- Source the target image source
//- Placeholder - the placeholder that is shown before the full image is loaded
//- image aspect ratio
//- method - when is the image going to be loaded? 'immediate' or 'scroll'

mixin lazy-image(source, placeholder, aspectRatio='1:1', method='scroll')
    div.lazy-img( 
      class=attributes.class 
      style=attributes.style
      data-src=source,
      data-method=method 
      data-property=attributes.property
      data-alt=attributes.alt)
      //- Calculate the bottom padding of the spacer
      -
        let ratio = aspectRatio;
        let ratioType = 'num';
        if (typeof ratio === 'string') {
          ratio = aspectRatio.split(':').map((x) => parseInt(x));
          ratioType = 'arr'
          if (isNaN(ratio[0]) || isNaN(ratio[1])) {
            throw new Error('Lazy image instatiation error, invalid ratio given');
          }
        }

      +spacer(ratio, ratioType)
      //- don't render an image placeholder with empty src tag
      if placeholder
        img(src=placeholder role="presentation" aria-hidden="true").preview
      .spinner
      //- img(alt=attributes.alt property=attributes.property).original
      //- If the user has disabled javascript, show the original image as loaded straight away
      //- with degraded UX.
      noscript: img(src=source alt=attributes.alt property=attributes.property).original.loaded

mixin lazy-cl-image(image, targetSize=0, aspectRatio='1:1', method='scroll')
  //- Target size is used to apply cloudinary crop of the image
  -
    const targetWidth = targetSize;
    let ratio = aspectRatio;
    if (typeof aspectRatio === 'string') {
      const [num, denom] = aspectRatio.split(':').map(x => parseInt(x));
      ratio  = num / denom;
    }
    const targetHeight = targetWidth * 1/ratio;
    const source = (targetSize != 0) ? imgTransform.limit(image.secure_url, targetSize) : image.secure_url
    const placeholder = imgTransform.limit(image.secure_url, 32);
  +lazy-image(source, placeholder, aspectRatio, method)&attributes(attributes)


mixin spacer(ratio, ratioType)
  - const predefRatios = ['16:9', '5:4', '4:3', '1:1'];
  if ratioType == 'num'
    .lazy-img__spacer(style=`padding-bottom: ${Math.ceil(1/ratio * 100)}%`)
  else if predefRatios.includes(aspectRatio)
    .lazy-img__spacer(class=`ratio-${ratio[0]}-to-${ratio[1]}`)
  else
    - const ratio2 = Math.ceil(ratio[1]/ratio[0] * 100); 
    .lazy-img__spacer(style=`padding-bottom: ${ratio2}%`)